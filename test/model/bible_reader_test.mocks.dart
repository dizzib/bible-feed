// Mocks generated by Mockito 5.4.6 from annotations
// in bible_feed/test/model/bible_reader_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i5;

import 'package:bible_feed/model/feed.dart' as _i2;
import 'package:bible_feed/model/reading_list.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:url_launcher_platform_interface/url_launcher_platform_interface.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFeedState_0 extends _i1.SmartFake implements _i2.FeedState {
  _FakeFeedState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Feed].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeed extends _i1.Mock implements _i2.Feed {
  @override
  int get bookIndex =>
      (super.noSuchMethod(
            Invocation.getter(#bookIndex),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get chaptersRead =>
      (super.noSuchMethod(
            Invocation.getter(#chaptersRead),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  String get chapterSplitLabel =>
      (super.noSuchMethod(
            Invocation.getter(#chapterSplitLabel),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#chapterSplitLabel),
            ),
            returnValueForMissingStub: _i3.dummyValue<String>(
              this,
              Invocation.getter(#chapterSplitLabel),
            ),
          )
          as String);

  @override
  double get progress =>
      (super.noSuchMethod(
            Invocation.getter(#progress),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  _i4.ReadingList get readingList =>
      (super.noSuchMethod(
            Invocation.getter(#readingList),
            returnValue: _i3.dummyValue<_i4.ReadingList>(
              this,
              Invocation.getter(#readingList),
            ),
            returnValueForMissingStub: _i3.dummyValue<_i4.ReadingList>(
              this,
              Invocation.getter(#readingList),
            ),
          )
          as _i4.ReadingList);

  @override
  _i2.FeedState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeFeedState_0(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeFeedState_0(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i2.FeedState);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void advance() => super.noSuchMethod(
    Invocation.method(#advance, []),
    returnValueForMissingStub: null,
  );

  @override
  void setBookAndChapter(int? bookIndex, int? chapter) => super.noSuchMethod(
    Invocation.method(#setBookAndChapter, [bookIndex, chapter]),
    returnValueForMissingStub: null,
  );

  @override
  void toggleIsRead() => super.noSuchMethod(
    Invocation.method(#toggleIsRead, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [UrlLauncherPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncherPlatform extends _i1.Mock
    implements _i6.UrlLauncherPlatform {
  @override
  _i7.Future<bool> canLaunch(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#canLaunch, [url]),
            returnValue: _i7.Future<bool>.value(false),
            returnValueForMissingStub: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<bool> launch(
    String? url, {
    required bool? useSafariVC,
    required bool? useWebView,
    required bool? enableJavaScript,
    required bool? enableDomStorage,
    required bool? universalLinksOnly,
    required Map<String, String>? headers,
    String? webOnlyWindowName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #launch,
              [url],
              {
                #useSafariVC: useSafariVC,
                #useWebView: useWebView,
                #enableJavaScript: enableJavaScript,
                #enableDomStorage: enableDomStorage,
                #universalLinksOnly: universalLinksOnly,
                #headers: headers,
                #webOnlyWindowName: webOnlyWindowName,
              },
            ),
            returnValue: _i7.Future<bool>.value(false),
            returnValueForMissingStub: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<bool> launchUrl(String? url, _i6.LaunchOptions? options) =>
      (super.noSuchMethod(
            Invocation.method(#launchUrl, [url, options]),
            returnValue: _i7.Future<bool>.value(false),
            returnValueForMissingStub: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> closeWebView() =>
      (super.noSuchMethod(
            Invocation.method(#closeWebView, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> supportsMode(_i6.PreferredLaunchMode? mode) =>
      (super.noSuchMethod(
            Invocation.method(#supportsMode, [mode]),
            returnValue: _i7.Future<bool>.value(false),
            returnValueForMissingStub: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<bool> supportsCloseForMode(_i6.PreferredLaunchMode? mode) =>
      (super.noSuchMethod(
            Invocation.method(#supportsCloseForMode, [mode]),
            returnValue: _i7.Future<bool>.value(false),
            returnValueForMissingStub: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);
}
