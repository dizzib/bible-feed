// Mocks generated by Mockito 5.4.6 from annotations
// in bible_feed/test/lib/service/bible_reader_link_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:bible_feed/model/bible_reader.dart' as _i2;
import 'package:bible_feed/model/bible_reader_key.dart' as _i4;
import 'package:bible_feed/model/book_key_externaliser.dart' as _i3;
import 'package:bible_feed/service/platform_service.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:shared_preferences/src/shared_preferences_legacy.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BibleReader].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockBibleReader extends _i1.Mock implements _i2.BibleReader {
  @override
  _i3.BookKeyExternaliser get bookKeyExternaliser =>
      (super.noSuchMethod(
            Invocation.getter(#bookKeyExternaliser),
            returnValue: _i3.BookKeyExternaliser.identity,
            returnValueForMissingStub: _i3.BookKeyExternaliser.identity,
          )
          as _i3.BookKeyExternaliser);

  @override
  _i4.BibleReaderKey get key =>
      (super.noSuchMethod(
            Invocation.getter(#key),
            returnValue: _i4.BibleReaderKey.none,
            returnValueForMissingStub: _i4.BibleReaderKey.none,
          )
          as _i4.BibleReaderKey);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i5.dummyValue<String>(this, Invocation.getter(#name)),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  String get uriTemplate =>
      (super.noSuchMethod(
            Invocation.getter(#uriTemplate),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#uriTemplate),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.getter(#uriTemplate),
            ),
          )
          as String);

  @override
  String get displayName =>
      (super.noSuchMethod(
            Invocation.getter(#displayName),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.getter(#displayName),
            ),
          )
          as String);

  @override
  bool get isApp =>
      (super.noSuchMethod(
            Invocation.getter(#isApp),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isNone =>
      (super.noSuchMethod(
            Invocation.getter(#isNone),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isCertified(_i6.PlatformService? platformService) =>
      (super.noSuchMethod(
            Invocation.method(#isCertified, [platformService]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}

/// A class which mocks [PlatformService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformService extends _i1.Mock implements _i6.PlatformService {
  @override
  bool get isAndroid =>
      (super.noSuchMethod(
            Invocation.getter(#isAndroid),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isIOS =>
      (super.noSuchMethod(
            Invocation.getter(#isIOS),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isHapticAvailable =>
      (super.noSuchMethod(
            Invocation.getter(#isHapticAvailable),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i7.SharedPreferences {
  @override
  Set<String> getKeys() =>
      (super.noSuchMethod(
            Invocation.method(#getKeys, []),
            returnValue: <String>{},
            returnValueForMissingStub: <String>{},
          )
          as Set<String>);

  @override
  Object? get(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#get, [key]),
            returnValueForMissingStub: null,
          )
          as Object?);

  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getBool, [key]),
            returnValueForMissingStub: null,
          )
          as bool?);

  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getInt, [key]),
            returnValueForMissingStub: null,
          )
          as int?);

  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getDouble, [key]),
            returnValueForMissingStub: null,
          )
          as double?);

  @override
  String? getString(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getString, [key]),
            returnValueForMissingStub: null,
          )
          as String?);

  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getStringList, [key]),
            returnValueForMissingStub: null,
          )
          as List<String>?);

  @override
  _i8.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#setBool, [key, value]),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(
            Invocation.method(#setInt, [key, value]),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(
            Invocation.method(#setDouble, [key, value]),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#setString, [key, value]),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(
            Invocation.method(#setStringList, [key, value]),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> remove(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key]),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> commit() =>
      (super.noSuchMethod(
            Invocation.method(#commit, []),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<void> reload() =>
      (super.noSuchMethod(
            Invocation.method(#reload, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}
