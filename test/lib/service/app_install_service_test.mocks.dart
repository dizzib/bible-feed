// Mocks generated by Mockito 5.4.6 from annotations
// in bible_feed/test/lib/service/app_install_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i9;

import 'package:bible_feed/model/bible_reader.dart' as _i2;
import 'package:bible_feed/model/feed.dart' as _i6;
import 'package:bible_feed/service/bible_reader_launch_service.dart' as _i3;
import 'package:bible_feed/service/bible_reader_link_service.dart' as _i8;
import 'package:bible_feed/service/platform_event_service.dart' as _i10;
import 'package:bible_feed/service/platform_service.dart' as _i11;
import 'package:bible_feed/service/result.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBibleReader_0 extends _i1.SmartFake implements _i2.BibleReader {
  _FakeBibleReader_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BibleReaderLaunchService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBibleReaderLaunchService extends _i1.Mock
    implements _i3.BibleReaderLaunchService {
  @override
  _i4.Future<bool> isAvailable(_i2.BibleReader? bibleReader) =>
      (super.noSuchMethod(
            Invocation.method(#isAvailable, [bibleReader]),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i5.Result> launch(
    _i2.BibleReader? bibleReader,
    _i6.FeedState? state,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#launch, [bibleReader, state]),
            returnValue: _i4.Future<_i5.Result>.value(
              _i7.dummyValue<_i5.Result>(
                this,
                Invocation.method(#launch, [bibleReader, state]),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i5.Result>.value(
              _i7.dummyValue<_i5.Result>(
                this,
                Invocation.method(#launch, [bibleReader, state]),
              ),
            ),
          )
          as _i4.Future<_i5.Result>);
}

/// A class which mocks [BibleReaderLinkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBibleReaderLinkService extends _i1.Mock
    implements _i8.BibleReaderLinkService {
  @override
  List<_i2.BibleReader> get certifiedBibleReaderList =>
      (super.noSuchMethod(
            Invocation.getter(#certifiedBibleReaderList),
            returnValue: <_i2.BibleReader>[],
            returnValueForMissingStub: <_i2.BibleReader>[],
          )
          as List<_i2.BibleReader>);

  @override
  bool get isLinked =>
      (super.noSuchMethod(
            Invocation.getter(#isLinked),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i2.BibleReader get linkedBibleReader =>
      (super.noSuchMethod(
            Invocation.getter(#linkedBibleReader),
            returnValue: _FakeBibleReader_0(
              this,
              Invocation.getter(#linkedBibleReader),
            ),
            returnValueForMissingStub: _FakeBibleReader_0(
              this,
              Invocation.getter(#linkedBibleReader),
            ),
          )
          as _i2.BibleReader);

  @override
  int get linkedBibleReaderIndex =>
      (super.noSuchMethod(
            Invocation.getter(#linkedBibleReaderIndex),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  set linkedBibleReaderIndex(int? value) => super.noSuchMethod(
    Invocation.setter(#linkedBibleReaderIndex, value),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void unlinkBibleReader() => super.noSuchMethod(
    Invocation.method(#unlinkBibleReader, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PlatformEventService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformEventService extends _i1.Mock
    implements _i10.PlatformEventService {
  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PlatformService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformService extends _i1.Mock implements _i11.PlatformService {
  @override
  bool get isAndroid =>
      (super.noSuchMethod(
            Invocation.getter(#isAndroid),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isIOS =>
      (super.noSuchMethod(
            Invocation.getter(#isIOS),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isHapticAvailable =>
      (super.noSuchMethod(
            Invocation.getter(#isHapticAvailable),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}
