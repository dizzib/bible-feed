// Mocks generated by Mockito 5.4.6 from annotations
// in bible_feed/test/lib/service/chapter_split_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i7;

import 'package:bible_feed/model/chapter_splitter.dart' as _i2;
import 'package:bible_feed/model/chapter_splitters.dart' as _i5;
import 'package:bible_feed/model/feed.dart' as _i4;
import 'package:bible_feed/service/chapter_split_toggler_service.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIterator_0<E> extends _i1.SmartFake implements Iterator<E> {
  _FakeIterator_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeChapterSplitter_1 extends _i1.SmartFake
    implements _i2.ChapterSplitter {
  _FakeChapterSplitter_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ChapterSplitter].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockChapterSplitter extends _i1.Mock implements _i2.ChapterSplitter {
  @override
  String get bookKey =>
      (super.noSuchMethod(
            Invocation.getter(#bookKey),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#bookKey),
            ),
            returnValueForMissingStub: _i3.dummyValue<String>(
              this,
              Invocation.getter(#bookKey),
            ),
          )
          as String);

  @override
  int get chapter =>
      (super.noSuchMethod(
            Invocation.getter(#chapter),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  List<int> get verses =>
      (super.noSuchMethod(
            Invocation.getter(#verses),
            returnValue: <int>[],
            returnValueForMissingStub: <int>[],
          )
          as List<int>);

  @override
  int getNextVerse(_i4.FeedState? state) =>
      (super.noSuchMethod(
            Invocation.method(#getNextVerse, [state]),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  String getLabel(_i4.FeedState? state) =>
      (super.noSuchMethod(
            Invocation.method(#getLabel, [state]),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#getLabel, [state]),
            ),
            returnValueForMissingStub: _i3.dummyValue<String>(
              this,
              Invocation.method(#getLabel, [state]),
            ),
          )
          as String);
}

/// A class which mocks [ChapterSplitters].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockChapterSplitters extends _i1.Mock implements _i5.ChapterSplitters {
  @override
  Iterator<_i2.ChapterSplitter> get iterator =>
      (super.noSuchMethod(
            Invocation.getter(#iterator),
            returnValue: _FakeIterator_0<_i2.ChapterSplitter>(
              this,
              Invocation.getter(#iterator),
            ),
            returnValueForMissingStub: _FakeIterator_0<_i2.ChapterSplitter>(
              this,
              Invocation.getter(#iterator),
            ),
          )
          as Iterator<_i2.ChapterSplitter>);

  @override
  int get length =>
      (super.noSuchMethod(
            Invocation.getter(#length),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool get isEmpty =>
      (super.noSuchMethod(
            Invocation.getter(#isEmpty),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(
            Invocation.getter(#isNotEmpty),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i2.ChapterSplitter get first =>
      (super.noSuchMethod(
            Invocation.getter(#first),
            returnValue: _FakeChapterSplitter_1(
              this,
              Invocation.getter(#first),
            ),
            returnValueForMissingStub: _FakeChapterSplitter_1(
              this,
              Invocation.getter(#first),
            ),
          )
          as _i2.ChapterSplitter);

  @override
  _i2.ChapterSplitter get last =>
      (super.noSuchMethod(
            Invocation.getter(#last),
            returnValue: _FakeChapterSplitter_1(this, Invocation.getter(#last)),
            returnValueForMissingStub: _FakeChapterSplitter_1(
              this,
              Invocation.getter(#last),
            ),
          )
          as _i2.ChapterSplitter);

  @override
  _i2.ChapterSplitter get single =>
      (super.noSuchMethod(
            Invocation.getter(#single),
            returnValue: _FakeChapterSplitter_1(
              this,
              Invocation.getter(#single),
            ),
            returnValueForMissingStub: _FakeChapterSplitter_1(
              this,
              Invocation.getter(#single),
            ),
          )
          as _i2.ChapterSplitter);

  @override
  _i2.ChapterSplitter? find(_i4.FeedState? state) =>
      (super.noSuchMethod(
            Invocation.method(#find, [state]),
            returnValueForMissingStub: null,
          )
          as _i2.ChapterSplitter?);

  @override
  _i2.ChapterSplitter operator [](int? i) =>
      (super.noSuchMethod(
            Invocation.method(#[], [i]),
            returnValue: _FakeChapterSplitter_1(
              this,
              Invocation.method(#[], [i]),
            ),
            returnValueForMissingStub: _FakeChapterSplitter_1(
              this,
              Invocation.method(#[], [i]),
            ),
          )
          as _i2.ChapterSplitter);

  @override
  Iterable<R> cast<R>() =>
      (super.noSuchMethod(
            Invocation.method(#cast, []),
            returnValue: <R>[],
            returnValueForMissingStub: <R>[],
          )
          as Iterable<R>);

  @override
  Iterable<_i2.ChapterSplitter> followedBy(
    Iterable<_i2.ChapterSplitter>? other,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#followedBy, [other]),
            returnValue: <_i2.ChapterSplitter>[],
            returnValueForMissingStub: <_i2.ChapterSplitter>[],
          )
          as Iterable<_i2.ChapterSplitter>);

  @override
  Iterable<T> map<T>(T Function(_i2.ChapterSplitter)? toElement) =>
      (super.noSuchMethod(
            Invocation.method(#map, [toElement]),
            returnValue: <T>[],
            returnValueForMissingStub: <T>[],
          )
          as Iterable<T>);

  @override
  Iterable<_i2.ChapterSplitter> where(
    bool Function(_i2.ChapterSplitter)? test,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#where, [test]),
            returnValue: <_i2.ChapterSplitter>[],
            returnValueForMissingStub: <_i2.ChapterSplitter>[],
          )
          as Iterable<_i2.ChapterSplitter>);

  @override
  Iterable<T> whereType<T>() =>
      (super.noSuchMethod(
            Invocation.method(#whereType, []),
            returnValue: <T>[],
            returnValueForMissingStub: <T>[],
          )
          as Iterable<T>);

  @override
  Iterable<T> expand<T>(
    Iterable<T> Function(_i2.ChapterSplitter)? toElements,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#expand, [toElements]),
            returnValue: <T>[],
            returnValueForMissingStub: <T>[],
          )
          as Iterable<T>);

  @override
  bool contains(Object? element) =>
      (super.noSuchMethod(
            Invocation.method(#contains, [element]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void forEach(void Function(_i2.ChapterSplitter)? action) =>
      super.noSuchMethod(
        Invocation.method(#forEach, [action]),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ChapterSplitter reduce(
    _i2.ChapterSplitter Function(_i2.ChapterSplitter, _i2.ChapterSplitter)?
    combine,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#reduce, [combine]),
            returnValue: _FakeChapterSplitter_1(
              this,
              Invocation.method(#reduce, [combine]),
            ),
            returnValueForMissingStub: _FakeChapterSplitter_1(
              this,
              Invocation.method(#reduce, [combine]),
            ),
          )
          as _i2.ChapterSplitter);

  @override
  T fold<T>(T? initialValue, T Function(T, _i2.ChapterSplitter)? combine) =>
      (super.noSuchMethod(
            Invocation.method(#fold, [initialValue, combine]),
            returnValue: _i3.dummyValue<T>(
              this,
              Invocation.method(#fold, [initialValue, combine]),
            ),
            returnValueForMissingStub: _i3.dummyValue<T>(
              this,
              Invocation.method(#fold, [initialValue, combine]),
            ),
          )
          as T);

  @override
  bool every(bool Function(_i2.ChapterSplitter)? test) =>
      (super.noSuchMethod(
            Invocation.method(#every, [test]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String join([String? separator = '']) =>
      (super.noSuchMethod(
            Invocation.method(#join, [separator]),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#join, [separator]),
            ),
            returnValueForMissingStub: _i3.dummyValue<String>(
              this,
              Invocation.method(#join, [separator]),
            ),
          )
          as String);

  @override
  bool any(bool Function(_i2.ChapterSplitter)? test) =>
      (super.noSuchMethod(
            Invocation.method(#any, [test]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i2.ChapterSplitter> toList({bool? growable = true}) =>
      (super.noSuchMethod(
            Invocation.method(#toList, [], {#growable: growable}),
            returnValue: <_i2.ChapterSplitter>[],
            returnValueForMissingStub: <_i2.ChapterSplitter>[],
          )
          as List<_i2.ChapterSplitter>);

  @override
  Set<_i2.ChapterSplitter> toSet() =>
      (super.noSuchMethod(
            Invocation.method(#toSet, []),
            returnValue: <_i2.ChapterSplitter>{},
            returnValueForMissingStub: <_i2.ChapterSplitter>{},
          )
          as Set<_i2.ChapterSplitter>);

  @override
  Iterable<_i2.ChapterSplitter> take(int? count) =>
      (super.noSuchMethod(
            Invocation.method(#take, [count]),
            returnValue: <_i2.ChapterSplitter>[],
            returnValueForMissingStub: <_i2.ChapterSplitter>[],
          )
          as Iterable<_i2.ChapterSplitter>);

  @override
  Iterable<_i2.ChapterSplitter> takeWhile(
    bool Function(_i2.ChapterSplitter)? test,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#takeWhile, [test]),
            returnValue: <_i2.ChapterSplitter>[],
            returnValueForMissingStub: <_i2.ChapterSplitter>[],
          )
          as Iterable<_i2.ChapterSplitter>);

  @override
  Iterable<_i2.ChapterSplitter> skip(int? count) =>
      (super.noSuchMethod(
            Invocation.method(#skip, [count]),
            returnValue: <_i2.ChapterSplitter>[],
            returnValueForMissingStub: <_i2.ChapterSplitter>[],
          )
          as Iterable<_i2.ChapterSplitter>);

  @override
  Iterable<_i2.ChapterSplitter> skipWhile(
    bool Function(_i2.ChapterSplitter)? test,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#skipWhile, [test]),
            returnValue: <_i2.ChapterSplitter>[],
            returnValueForMissingStub: <_i2.ChapterSplitter>[],
          )
          as Iterable<_i2.ChapterSplitter>);

  @override
  _i2.ChapterSplitter firstWhere(
    bool Function(_i2.ChapterSplitter)? test, {
    _i2.ChapterSplitter Function()? orElse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#firstWhere, [test], {#orElse: orElse}),
            returnValue: _FakeChapterSplitter_1(
              this,
              Invocation.method(#firstWhere, [test], {#orElse: orElse}),
            ),
            returnValueForMissingStub: _FakeChapterSplitter_1(
              this,
              Invocation.method(#firstWhere, [test], {#orElse: orElse}),
            ),
          )
          as _i2.ChapterSplitter);

  @override
  _i2.ChapterSplitter lastWhere(
    bool Function(_i2.ChapterSplitter)? test, {
    _i2.ChapterSplitter Function()? orElse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#lastWhere, [test], {#orElse: orElse}),
            returnValue: _FakeChapterSplitter_1(
              this,
              Invocation.method(#lastWhere, [test], {#orElse: orElse}),
            ),
            returnValueForMissingStub: _FakeChapterSplitter_1(
              this,
              Invocation.method(#lastWhere, [test], {#orElse: orElse}),
            ),
          )
          as _i2.ChapterSplitter);

  @override
  _i2.ChapterSplitter singleWhere(
    bool Function(_i2.ChapterSplitter)? test, {
    _i2.ChapterSplitter Function()? orElse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#singleWhere, [test], {#orElse: orElse}),
            returnValue: _FakeChapterSplitter_1(
              this,
              Invocation.method(#singleWhere, [test], {#orElse: orElse}),
            ),
            returnValueForMissingStub: _FakeChapterSplitter_1(
              this,
              Invocation.method(#singleWhere, [test], {#orElse: orElse}),
            ),
          )
          as _i2.ChapterSplitter);

  @override
  _i2.ChapterSplitter elementAt(int? index) =>
      (super.noSuchMethod(
            Invocation.method(#elementAt, [index]),
            returnValue: _FakeChapterSplitter_1(
              this,
              Invocation.method(#elementAt, [index]),
            ),
            returnValueForMissingStub: _FakeChapterSplitter_1(
              this,
              Invocation.method(#elementAt, [index]),
            ),
          )
          as _i2.ChapterSplitter);
}

/// A class which mocks [ChapterSplitTogglerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChapterSplitTogglerService extends _i1.Mock
    implements _i6.ChapterSplitTogglerService {
  @override
  bool get canEnable =>
      (super.noSuchMethod(
            Invocation.getter(#canEnable),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String get storeKey =>
      (super.noSuchMethod(
            Invocation.getter(#storeKey),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#storeKey),
            ),
            returnValueForMissingStub: _i3.dummyValue<String>(
              this,
              Invocation.getter(#storeKey),
            ),
          )
          as String);

  @override
  String get title =>
      (super.noSuchMethod(
            Invocation.getter(#title),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#title),
            ),
            returnValueForMissingStub: _i3.dummyValue<String>(
              this,
              Invocation.getter(#title),
            ),
          )
          as String);

  @override
  String get subtitle =>
      (super.noSuchMethod(
            Invocation.getter(#subtitle),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#subtitle),
            ),
            returnValueForMissingStub: _i3.dummyValue<String>(
              this,
              Invocation.getter(#subtitle),
            ),
          )
          as String);

  @override
  bool get isEnabled =>
      (super.noSuchMethod(
            Invocation.getter(#isEnabled),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set isEnabled(bool? value) => super.noSuchMethod(
    Invocation.setter(#isEnabled, value),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
