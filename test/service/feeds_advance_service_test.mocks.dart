// Mocks generated by Mockito 5.4.6 from annotations
// in bible_feed/test/service/feeds_advance_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i5;

import 'package:bible_feed/model/feed.dart' as _i2;
import 'package:bible_feed/model/feeds.dart' as _i6;
import 'package:bible_feed/model/reading_list.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:shared_preferences/src/shared_preferences_legacy.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFeedState_0 extends _i1.SmartFake implements _i2.FeedState {
  _FakeFeedState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIterator_1<E> extends _i1.SmartFake implements Iterator<E> {
  _FakeIterator_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFeed_2 extends _i1.SmartFake implements _i2.Feed {
  _FakeFeed_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Feed].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeed extends _i1.Mock implements _i2.Feed {
  @override
  int get bookIndex =>
      (super.noSuchMethod(
            Invocation.getter(#bookIndex),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get chaptersRead =>
      (super.noSuchMethod(
            Invocation.getter(#chaptersRead),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  double get progress =>
      (super.noSuchMethod(
            Invocation.getter(#progress),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  _i3.ReadingList get readingList =>
      (super.noSuchMethod(
            Invocation.getter(#readingList),
            returnValue: _i4.dummyValue<_i3.ReadingList>(
              this,
              Invocation.getter(#readingList),
            ),
            returnValueForMissingStub: _i4.dummyValue<_i3.ReadingList>(
              this,
              Invocation.getter(#readingList),
            ),
          )
          as _i3.ReadingList);

  @override
  _i2.FeedState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeFeedState_0(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeFeedState_0(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i2.FeedState);

  @override
  String get verseScopeLabel =>
      (super.noSuchMethod(
            Invocation.getter(#verseScopeLabel),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#verseScopeLabel),
            ),
            returnValueForMissingStub: _i4.dummyValue<String>(
              this,
              Invocation.getter(#verseScopeLabel),
            ),
          )
          as String);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void advance() => super.noSuchMethod(
    Invocation.method(#advance, []),
    returnValueForMissingStub: null,
  );

  @override
  void setBookAndChapter(int? bookIndex, int? chapter) => super.noSuchMethod(
    Invocation.method(#setBookAndChapter, [bookIndex, chapter]),
    returnValueForMissingStub: null,
  );

  @override
  void toggleIsRead() => super.noSuchMethod(
    Invocation.method(#toggleIsRead, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Feeds].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeeds extends _i1.Mock implements _i6.Feeds {
  @override
  bool get areChaptersRead =>
      (super.noSuchMethod(
            Invocation.getter(#areChaptersRead),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  Iterator<_i2.Feed> get iterator =>
      (super.noSuchMethod(
            Invocation.getter(#iterator),
            returnValue: _FakeIterator_1<_i2.Feed>(
              this,
              Invocation.getter(#iterator),
            ),
            returnValueForMissingStub: _FakeIterator_1<_i2.Feed>(
              this,
              Invocation.getter(#iterator),
            ),
          )
          as Iterator<_i2.Feed>);

  @override
  int get length =>
      (super.noSuchMethod(
            Invocation.getter(#length),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool get isEmpty =>
      (super.noSuchMethod(
            Invocation.getter(#isEmpty),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(
            Invocation.getter(#isNotEmpty),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i2.Feed get first =>
      (super.noSuchMethod(
            Invocation.getter(#first),
            returnValue: _FakeFeed_2(this, Invocation.getter(#first)),
            returnValueForMissingStub: _FakeFeed_2(
              this,
              Invocation.getter(#first),
            ),
          )
          as _i2.Feed);

  @override
  _i2.Feed get last =>
      (super.noSuchMethod(
            Invocation.getter(#last),
            returnValue: _FakeFeed_2(this, Invocation.getter(#last)),
            returnValueForMissingStub: _FakeFeed_2(
              this,
              Invocation.getter(#last),
            ),
          )
          as _i2.Feed);

  @override
  _i2.Feed get single =>
      (super.noSuchMethod(
            Invocation.getter(#single),
            returnValue: _FakeFeed_2(this, Invocation.getter(#single)),
            returnValueForMissingStub: _FakeFeed_2(
              this,
              Invocation.getter(#single),
            ),
          )
          as _i2.Feed);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i2.Feed operator [](int? i) =>
      (super.noSuchMethod(
            Invocation.method(#[], [i]),
            returnValue: _FakeFeed_2(this, Invocation.method(#[], [i])),
            returnValueForMissingStub: _FakeFeed_2(
              this,
              Invocation.method(#[], [i]),
            ),
          )
          as _i2.Feed);

  @override
  Iterable<R> cast<R>() =>
      (super.noSuchMethod(
            Invocation.method(#cast, []),
            returnValue: <R>[],
            returnValueForMissingStub: <R>[],
          )
          as Iterable<R>);

  @override
  Iterable<_i2.Feed> followedBy(Iterable<_i2.Feed>? other) =>
      (super.noSuchMethod(
            Invocation.method(#followedBy, [other]),
            returnValue: <_i2.Feed>[],
            returnValueForMissingStub: <_i2.Feed>[],
          )
          as Iterable<_i2.Feed>);

  @override
  Iterable<T> map<T>(T Function(_i2.Feed)? toElement) =>
      (super.noSuchMethod(
            Invocation.method(#map, [toElement]),
            returnValue: <T>[],
            returnValueForMissingStub: <T>[],
          )
          as Iterable<T>);

  @override
  Iterable<_i2.Feed> where(bool Function(_i2.Feed)? test) =>
      (super.noSuchMethod(
            Invocation.method(#where, [test]),
            returnValue: <_i2.Feed>[],
            returnValueForMissingStub: <_i2.Feed>[],
          )
          as Iterable<_i2.Feed>);

  @override
  Iterable<T> whereType<T>() =>
      (super.noSuchMethod(
            Invocation.method(#whereType, []),
            returnValue: <T>[],
            returnValueForMissingStub: <T>[],
          )
          as Iterable<T>);

  @override
  Iterable<T> expand<T>(Iterable<T> Function(_i2.Feed)? toElements) =>
      (super.noSuchMethod(
            Invocation.method(#expand, [toElements]),
            returnValue: <T>[],
            returnValueForMissingStub: <T>[],
          )
          as Iterable<T>);

  @override
  bool contains(Object? element) =>
      (super.noSuchMethod(
            Invocation.method(#contains, [element]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void forEach(void Function(_i2.Feed)? action) => super.noSuchMethod(
    Invocation.method(#forEach, [action]),
    returnValueForMissingStub: null,
  );

  @override
  _i2.Feed reduce(_i2.Feed Function(_i2.Feed, _i2.Feed)? combine) =>
      (super.noSuchMethod(
            Invocation.method(#reduce, [combine]),
            returnValue: _FakeFeed_2(
              this,
              Invocation.method(#reduce, [combine]),
            ),
            returnValueForMissingStub: _FakeFeed_2(
              this,
              Invocation.method(#reduce, [combine]),
            ),
          )
          as _i2.Feed);

  @override
  T fold<T>(T? initialValue, T Function(T, _i2.Feed)? combine) =>
      (super.noSuchMethod(
            Invocation.method(#fold, [initialValue, combine]),
            returnValue: _i4.dummyValue<T>(
              this,
              Invocation.method(#fold, [initialValue, combine]),
            ),
            returnValueForMissingStub: _i4.dummyValue<T>(
              this,
              Invocation.method(#fold, [initialValue, combine]),
            ),
          )
          as T);

  @override
  bool every(bool Function(_i2.Feed)? test) =>
      (super.noSuchMethod(
            Invocation.method(#every, [test]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String join([String? separator = '']) =>
      (super.noSuchMethod(
            Invocation.method(#join, [separator]),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#join, [separator]),
            ),
            returnValueForMissingStub: _i4.dummyValue<String>(
              this,
              Invocation.method(#join, [separator]),
            ),
          )
          as String);

  @override
  bool any(bool Function(_i2.Feed)? test) =>
      (super.noSuchMethod(
            Invocation.method(#any, [test]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<_i2.Feed> toList({bool? growable = true}) =>
      (super.noSuchMethod(
            Invocation.method(#toList, [], {#growable: growable}),
            returnValue: <_i2.Feed>[],
            returnValueForMissingStub: <_i2.Feed>[],
          )
          as List<_i2.Feed>);

  @override
  Set<_i2.Feed> toSet() =>
      (super.noSuchMethod(
            Invocation.method(#toSet, []),
            returnValue: <_i2.Feed>{},
            returnValueForMissingStub: <_i2.Feed>{},
          )
          as Set<_i2.Feed>);

  @override
  Iterable<_i2.Feed> take(int? count) =>
      (super.noSuchMethod(
            Invocation.method(#take, [count]),
            returnValue: <_i2.Feed>[],
            returnValueForMissingStub: <_i2.Feed>[],
          )
          as Iterable<_i2.Feed>);

  @override
  Iterable<_i2.Feed> takeWhile(bool Function(_i2.Feed)? test) =>
      (super.noSuchMethod(
            Invocation.method(#takeWhile, [test]),
            returnValue: <_i2.Feed>[],
            returnValueForMissingStub: <_i2.Feed>[],
          )
          as Iterable<_i2.Feed>);

  @override
  Iterable<_i2.Feed> skip(int? count) =>
      (super.noSuchMethod(
            Invocation.method(#skip, [count]),
            returnValue: <_i2.Feed>[],
            returnValueForMissingStub: <_i2.Feed>[],
          )
          as Iterable<_i2.Feed>);

  @override
  Iterable<_i2.Feed> skipWhile(bool Function(_i2.Feed)? test) =>
      (super.noSuchMethod(
            Invocation.method(#skipWhile, [test]),
            returnValue: <_i2.Feed>[],
            returnValueForMissingStub: <_i2.Feed>[],
          )
          as Iterable<_i2.Feed>);

  @override
  _i2.Feed firstWhere(
    bool Function(_i2.Feed)? test, {
    _i2.Feed Function()? orElse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#firstWhere, [test], {#orElse: orElse}),
            returnValue: _FakeFeed_2(
              this,
              Invocation.method(#firstWhere, [test], {#orElse: orElse}),
            ),
            returnValueForMissingStub: _FakeFeed_2(
              this,
              Invocation.method(#firstWhere, [test], {#orElse: orElse}),
            ),
          )
          as _i2.Feed);

  @override
  _i2.Feed lastWhere(
    bool Function(_i2.Feed)? test, {
    _i2.Feed Function()? orElse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#lastWhere, [test], {#orElse: orElse}),
            returnValue: _FakeFeed_2(
              this,
              Invocation.method(#lastWhere, [test], {#orElse: orElse}),
            ),
            returnValueForMissingStub: _FakeFeed_2(
              this,
              Invocation.method(#lastWhere, [test], {#orElse: orElse}),
            ),
          )
          as _i2.Feed);

  @override
  _i2.Feed singleWhere(
    bool Function(_i2.Feed)? test, {
    _i2.Feed Function()? orElse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#singleWhere, [test], {#orElse: orElse}),
            returnValue: _FakeFeed_2(
              this,
              Invocation.method(#singleWhere, [test], {#orElse: orElse}),
            ),
            returnValueForMissingStub: _FakeFeed_2(
              this,
              Invocation.method(#singleWhere, [test], {#orElse: orElse}),
            ),
          )
          as _i2.Feed);

  @override
  _i2.Feed elementAt(int? index) =>
      (super.noSuchMethod(
            Invocation.method(#elementAt, [index]),
            returnValue: _FakeFeed_2(
              this,
              Invocation.method(#elementAt, [index]),
            ),
            returnValueForMissingStub: _FakeFeed_2(
              this,
              Invocation.method(#elementAt, [index]),
            ),
          )
          as _i2.Feed);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i7.SharedPreferences {
  @override
  Set<String> getKeys() =>
      (super.noSuchMethod(
            Invocation.method(#getKeys, []),
            returnValue: <String>{},
            returnValueForMissingStub: <String>{},
          )
          as Set<String>);

  @override
  Object? get(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#get, [key]),
            returnValueForMissingStub: null,
          )
          as Object?);

  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getBool, [key]),
            returnValueForMissingStub: null,
          )
          as bool?);

  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getInt, [key]),
            returnValueForMissingStub: null,
          )
          as int?);

  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getDouble, [key]),
            returnValueForMissingStub: null,
          )
          as double?);

  @override
  String? getString(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getString, [key]),
            returnValueForMissingStub: null,
          )
          as String?);

  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getStringList, [key]),
            returnValueForMissingStub: null,
          )
          as List<String>?);

  @override
  _i8.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#setBool, [key, value]),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(
            Invocation.method(#setInt, [key, value]),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(
            Invocation.method(#setDouble, [key, value]),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#setString, [key, value]),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(
            Invocation.method(#setStringList, [key, value]),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> remove(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key]),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> commit() =>
      (super.noSuchMethod(
            Invocation.method(#commit, []),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i8.Future<bool>.value(false),
            returnValueForMissingStub: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<void> reload() =>
      (super.noSuchMethod(
            Invocation.method(#reload, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}
