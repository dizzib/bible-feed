// Mocks generated by Mockito 5.4.6 from annotations
// in bible_feed/test/service/verse_scope_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i5;

import 'package:bible_feed/model/verse_scopes.dart' as _i2;
import 'package:bible_feed/service/verse_scope_toggler_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [VerseScopes].
///
/// See the documentation for Mockito's code generation for more information.
class MockVerseScopes extends _i1.Mock implements _i2.VerseScopes {
  @override
  Iterable<String> get keys =>
      (super.noSuchMethod(
            Invocation.getter(#keys),
            returnValue: <String>[],
            returnValueForMissingStub: <String>[],
          )
          as Iterable<String>);

  @override
  Iterable<MapEntry<String, dynamic>> get entries =>
      (super.noSuchMethod(
            Invocation.getter(#entries),
            returnValue: <MapEntry<String, dynamic>>[],
            returnValueForMissingStub: <MapEntry<String, dynamic>>[],
          )
          as Iterable<MapEntry<String, dynamic>>);

  @override
  int get length =>
      (super.noSuchMethod(
            Invocation.getter(#length),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool get isEmpty =>
      (super.noSuchMethod(
            Invocation.getter(#isEmpty),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(
            Invocation.getter(#isNotEmpty),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  Iterable<dynamic> get values =>
      (super.noSuchMethod(
            Invocation.getter(#values),
            returnValue: <dynamic>[],
            returnValueForMissingStub: <dynamic>[],
          )
          as Iterable<dynamic>);

  @override
  void operator []=(String? key, dynamic value) => super.noSuchMethod(
    Invocation.method(#[]=, [key, value]),
    returnValueForMissingStub: null,
  );

  @override
  void clear() => super.noSuchMethod(
    Invocation.method(#clear, []),
    returnValueForMissingStub: null,
  );

  @override
  Map<RK, RV> cast<RK, RV>() =>
      (super.noSuchMethod(
            Invocation.method(#cast, []),
            returnValue: <RK, RV>{},
            returnValueForMissingStub: <RK, RV>{},
          )
          as Map<RK, RV>);

  @override
  void forEach(void Function(String, dynamic)? action) => super.noSuchMethod(
    Invocation.method(#forEach, [action]),
    returnValueForMissingStub: null,
  );

  @override
  void addAll(Map<String, dynamic>? other) => super.noSuchMethod(
    Invocation.method(#addAll, [other]),
    returnValueForMissingStub: null,
  );

  @override
  bool containsValue(Object? value) =>
      (super.noSuchMethod(
            Invocation.method(#containsValue, [value]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  dynamic putIfAbsent(String? key, dynamic Function()? ifAbsent) =>
      super.noSuchMethod(
        Invocation.method(#putIfAbsent, [key, ifAbsent]),
        returnValueForMissingStub: null,
      );

  @override
  dynamic update(
    String? key,
    dynamic Function(dynamic)? update, {
    dynamic Function()? ifAbsent,
  }) => super.noSuchMethod(
    Invocation.method(#update, [key, update], {#ifAbsent: ifAbsent}),
    returnValueForMissingStub: null,
  );

  @override
  void updateAll(dynamic Function(String, dynamic)? update) =>
      super.noSuchMethod(
        Invocation.method(#updateAll, [update]),
        returnValueForMissingStub: null,
      );

  @override
  Map<K2, V2> map<K2, V2>(
    MapEntry<K2, V2> Function(String, dynamic)? transform,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#map, [transform]),
            returnValue: <K2, V2>{},
            returnValueForMissingStub: <K2, V2>{},
          )
          as Map<K2, V2>);

  @override
  void addEntries(Iterable<MapEntry<String, dynamic>>? newEntries) =>
      super.noSuchMethod(
        Invocation.method(#addEntries, [newEntries]),
        returnValueForMissingStub: null,
      );

  @override
  void removeWhere(bool Function(String, dynamic)? test) => super.noSuchMethod(
    Invocation.method(#removeWhere, [test]),
    returnValueForMissingStub: null,
  );

  @override
  bool containsKey(Object? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}

/// A class which mocks [VerseScopeTogglerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockVerseScopeTogglerService extends _i1.Mock
    implements _i3.VerseScopeTogglerService {
  @override
  bool get canEnable =>
      (super.noSuchMethod(
            Invocation.getter(#canEnable),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String get storeKey =>
      (super.noSuchMethod(
            Invocation.getter(#storeKey),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#storeKey),
            ),
            returnValueForMissingStub: _i4.dummyValue<String>(
              this,
              Invocation.getter(#storeKey),
            ),
          )
          as String);

  @override
  String get title =>
      (super.noSuchMethod(
            Invocation.getter(#title),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#title),
            ),
            returnValueForMissingStub: _i4.dummyValue<String>(
              this,
              Invocation.getter(#title),
            ),
          )
          as String);

  @override
  String get subtitle =>
      (super.noSuchMethod(
            Invocation.getter(#subtitle),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#subtitle),
            ),
            returnValueForMissingStub: _i4.dummyValue<String>(
              this,
              Invocation.getter(#subtitle),
            ),
          )
          as String);

  @override
  bool get isEnabled =>
      (super.noSuchMethod(
            Invocation.getter(#isEnabled),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set isEnabled(bool? value) => super.noSuchMethod(
    Invocation.setter(#isEnabled, value),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
